package controller;

import model.Automovel;
import model.AutomovelRep;
import view.CadastroAutomoveisView;

import java.io.*;
import java.util.*;

public class ControlaAutomovel {
    private static final String ARQUIVO = "automoveis.txt";
    private List<Automovel> automoveis;
    private CadastroAutomoveisView view;

    public ControlaAutomovel(CadastroAutomoveisView view) {
        this.view = view;
        this.automoveis = new ArrayList<>();
        carregarDados();
    }

    public void executar() {
        int opcao;
        do {
            opcao = view.exibirMenu();

            switch (opcao) {
                case 1 -> inserirAutomovel();
                case 2 -> removerAutomovel();
                case 3 -> alterarAutomovel();
                case 4 -> consultarAutomovel();
                case 5 -> listarAutomoveisOrdenados();
                case 6 -> salvarDados();
                default -> view.mostrarMensagem("Opção inválida!");
            }
        } while (opcao != 6);
    }

    private void inserirAutomovel() {
        String placa = view.lerPlaca();

        if (buscarPorPlaca(placa) != null) {
            view.mostrarMensagem("Placa já cadastrada.");
            AutomovelRep.salvarAutomoveis(automoveis);
            return;

        }

        String modelo = view.lerModelo();
        String marca = view.lerMarca();
        int ano = view.lerAno();
        double valor = view.lerValor();

        automoveis.add(new Automovel(placa, modelo, marca, ano, valor));
        view.mostrarMensagem("Automóvel adicionado.");
    }

    private void removerAutomovel() {
        String placa = view.lerPlaca();
        Automovel a = buscarPorPlaca(placa);
        if (a != null) {
            automoveis.remove(a);
            view.mostrarMensagem("Automóvel removido.");
        } else {
            view.mostrarMensagem("Automóvel não encontrado.");
        }
    }

    private void alterarAutomovel() {
        String placa = view.lerPlaca();
        Automovel a = buscarPorPlaca(placa);
        if (a != null) {
            a.setModelo(view.lerModelo());
            a.setMarca(view.lerMarca());
            a.setAno(view.lerAno());
            a.setValor(view.lerValor());
            view.mostrarMensagem("Dados alterados.");
        } else {
            view.mostrarMensagem("Automóvel não encontrado.");
        }
    }

    private void consultarAutomovel() {
        String placa = view.lerPlaca();
        Automovel a = buscarPorPlaca(placa);
        if (a != null) {
            view.exibirAutomovel(a.toFormattedString());
        } else {
            view.mostrarMensagem("Automóvel não encontrado.");
        }
    }

    private void listarAutomoveisOrdenados() {
        String criterio = view.lerCriterioOrdenacao();
        List<Automovel> copia = new ArrayList<>(automoveis);

        switch (criterio) {
            case "placa" -> copia.sort(Comparator.comparing(Automovel::getPlaca));
            case "modelo" -> copia.sort(Comparator.comparing(Automovel::getModelo));
            case "marca" -> copia.sort(Comparator.comparing(Automovel::getMarca));
            default -> {
                view.mostrarMensagem("Critério inválido.");
                return;
            }
        }

        StringBuilder listaFormatada = new StringBuilder();
        for (Automovel a : copia) {
            listaFormatada.append(a.toFormattedString()).append("\n");
        }

        view.exibirListaAutomoveis(listaFormatada.toString());
    }

    private void carregarDados() {
        try (BufferedReader br = new BufferedReader(new FileReader(ARQUIVO))) {
            String linha;
            while ((linha = br.readLine()) != null) {
                String[] dados = linha.split(",");
                if (dados.length == 5) {
                    String placa = dados[0];
                    String modelo = dados[1];
                    String marca = dados[2];
                    int ano = Integer.parseInt(dados[3]);
                    double valor = Double.parseDouble(dados[4]);
                    automoveis.add(new Automovel(placa, modelo, marca, ano, valor));
                }
            }
        } catch (IOException e) {
            System.out.println("Arquivo não encontrado, iniciando lista vazia.");
        }
    }

    private void salvarDados() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(ARQUIVO))) {
            for (Automovel a : automoveis) {
                bw.write(a.toString());
                bw.newLine();
            }
            view.mostrarMensagem("Dados salvos com sucesso.");
        } catch (IOException e) {
            view.mostrarMensagem("Erro ao salvar dados.");
        }
    }

    private Automovel buscarPorPlaca(String placa) {
        for (Automovel a : automoveis) {
            if (a.getPlaca().equalsIgnoreCase(placa)) {
                return a;
            }
        }
        return null;
       
    }
}
